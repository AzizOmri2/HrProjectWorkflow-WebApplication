class SessionsController < Devise::SessionsController
  respond_to :json

  def create
    # First, check if a user with the given email exists
    user = User.find_by(email: params[:user][:email])
  
    unless user
      render json: {
        message: 'Sign in failed.',
        errors: ['Email not found']
      }, status: :unauthorized and return
    end
  
    # Proceed to authenticate the user using Devise
    self.resource = warden.authenticate!(auth_options)
    sign_in(resource_name, resource)
  
    # Check if authentication was successful
    if resource.persisted? && resource.valid_password?(params[:user][:password])
      Rails.logger.debug "User signed in: #{resource.inspect}"
  
      # JWT token is automatically generated by devise-jwt
      token = request.env['warden-jwt_auth.token']
  
      # Respond with the user details and JWT token
      render json: {
        message: 'Signed in successfully.',
        user: {
          id: resource.id,
          name: resource.name,
          email: resource.email,
          created_at: resource.created_at,
          updated_at: resource.updated_at,
          role: resource.role,
          image: resource.image
        },
        token: token
      }, status: :ok
    else
      Rails.logger.debug "Sign in failed: #{resource.errors.full_messages}"
      render json: {
        message: 'Sign in failed.',
        errors: ['Invalid email or password']
      }, status: :unauthorized
    end
  end

  def destroy
    super
    render json: { message: 'Signed out successfully.' }, status: :ok
  end

  # Add this method to handle the sign-out response
  def respond_to_on_destroy
    # Custom response on logout
    render json: { message: 'Signed out successfully.' }, status: :ok
  end
end